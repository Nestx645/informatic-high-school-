import random

def dico_alea() -> dict:
    """
    Fonction qui construit un dictionnaire de codage
    à chaque lettre MAJUSCULE de l'alphabet on fait correspondre
    une lettre MAJUSCULE prise aléatoirement
    :return: un dictionnaire ex : {'A': 'D', 'B': 'Y'....}
    """
    lettre = [chr(i) for i in range(65, 91)]
    random.shuffle(lettre)
    dic = {}
    for i in range(65, 91):
        dic[chr(i)] = lettre[i-65]
    return dic
       

def crypto_lettre(dico: dict, lettre: str) -> str:
    """
    Fonction qui renvoie une lettre cryptée d'après le dictionnaire associé
    :param dico:
    :param lettre: lettre MAJUSCULE
    :return: la lettre cryptée en MAJUSCULE
    """
    return dico[lettre]

def crypto_texte(dico, texte):
    """
    Fonction qui renvoie un texte crypté à partir du texte entré et
    du dictionnaire associé
    On utilise la fonction crypto_lettre
    :param dict:
    :param texte: texte en MAJUSCULES
    :return: le texte crypté en MAJUSCULES
    """
    t = ""
    for lettre in texte:
        if lettre == ' ':
            t += ' '
        else:
            t += crypto_lettre(dico, lettre)
    return t 


def lire_fichier(fichier: str) -> list:
    """
    Fonction qui renvoie une liste après lecture d'un fichier texte
    :param fichier:
    :return: liste contenant le texte
    """
    with open(fichier, 'r') as f:
        t = f.read()
    return t
    

def occurrence(texte: str) -> dict:
    """
    Fonction qui renvoie un dictionnaire composé des lettres de
    l'alphabet et du nombre d'occurences de la lettre dans le texte
    entré en paramètre
    :param texte: le texte crypté en MAJUSCULES
    :return: un dictionnaire
    """
    dic = {}
    for i in range(65, 91):
        dic[chr(i)] = 0
    for lettre in texte:
        if lettre != " ":
            dic[lettre] += 1
    return dic

def maxi(dico: dict) -> str:
    """
    Fonction qui renvoie la lettre ayant la plus grande occurence
    des lettres du dictionnaire
    :param dico: dictionnaire des occurences
    :return: la lettre ayant la plus grande occurence
    """
    m=-1
    lettre=""
    for cle, val, in dico.items():
        if val > m:
            m=val
            lettre = cle
    return lettre

def propose(texte: str) -> dict:
    """
    Fonction qui renvoie une proposition de dictionnaire de décodage
    du texte entré en paramètre
    On utilise les fonctions occurence et maxi
    :param texte:
    :return: le dictionnaire de décodage
    """
    dic_freq = ['E', 'A', 'S', 'I', 'N', 'T', 'R', 'L', 'U', 'O', 'D', 'C', 'P', 'M', 'V', 'G', 'F', 'B', 'Q', 'H', 'X', 'J', 'Y', 'Z', 'K', 'W']
    occ = occurrence(texte)
    dic={}
    for i in range(26):
        lettre_franc = dic_freq[i]
        lettre_text = maxi(occ)
        occ[lettre_text] = -1
        dic[lettre_text] = lettre_franc
        
    return dic

def permute(dico: dict,l1: str,l2: str) -> dict:
    """
    Fonction qui permute 2 lettres dans un dictionnaire
    :param dico:
    :param l1: lettre en MAJUSCULE
    :param l2: lettre en MAJUSCULE
    :return: le nouveau dictionnaire
    """
    a = ""
    b = ""
    for cle, val in dico.items():
        if val == l1:
            a = cle
        if val == l2:
            b = cle
    dico[a] = l2
    dico[b] = l1
    return dico
        
    

#programme principal
table = lire_fichier("texte.txt")
d = propose(table)
print(d)
print(crypto_texte(d, table))
permute(d,"N","L")
permute(d,"H","B")
permute(d,"H","G")
permute(d,"L","U")
permute(d,"Q","H")

print()
print(crypto_texte(d, table))
